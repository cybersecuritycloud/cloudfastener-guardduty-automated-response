AWSTemplateFormatVersion: "2010-09-09"
Description: >
  このテンプレートは、Security Hub にインポートされた GuardDuty の所見をトリガーに、
  対象の EC2 または ECS (Fargate) インスタンスに紐づくセキュリティグループの
  ingress/egress ルールを削除する Step Functions 状態マシンを作成します.
  Fargate 分岐では、タスクの Group フィールドからサービス名を抽出し、
  ECS DescribeServices API によりサービスに紐づくセキュリティグループを動的に取得して
  revoke を実施します.

Resources:

  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "StepFunctionsExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsServiceIntegrationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DescribeNetworkInterfaces
                  - ecs:DescribeTasks
                  - ecs:DescribeServices
                Resource: "*"

  SecurityGroupRevocationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: SecurityGroupRevocationStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Revoke security group rules for EC2 and Fargate tasks based on Security Hub findings",
          "StartAt": "CheckResourceType",
          "States": {
            "CheckResourceType": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.detail.findings[0].Resources[0].Type",
                  "StringEquals": "AwsEc2Instance",
                  "Next": "EC2_DescribeInstance"
                },
                {
                  "Variable": "$.detail.findings[0].Resources[0].Type",
                  "StringEquals": "AwsEcsTask",
                  "Next": "Fargate_SelectTask"
                },
                {
                  "Variable": "$.detail.findings[0].Resources[1].Type",
                  "StringEquals": "AwsEcsTask",
                  "Next": "Fargate_SelectTask"
                }
              ],
              "Default": "UnsupportedResource"
            },
            "UnsupportedResource": {
              "Type": "Fail",
              "Error": "UnsupportedResourceType",
              "Cause": "The resource type is not supported."
            },

            "EC2_DescribeInstance": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
              "Parameters": {
                "InstanceIds.$": "States.Array(States.ArrayGetItem(States.StringSplit($.detail.findings[0].Resources[0].Id, '/'), 1))"
              },
              "ResultPath": "$.EC2Instance",
              "Next": "EC2_ExtractSG"
            },
            "EC2_ExtractSG": {
              "Type": "Pass",
              "Parameters": {
                "securityGroupObjects.$": "$.EC2Instance.Reservations[0].Instances[0].SecurityGroups"
              },
              "ResultPath": "$.extractedSG",
              "Next": "EC2_ProcessSG"
            },
            "EC2_ProcessSG": {
              "Type": "Map",
              "ItemsPath": "$.extractedSG.securityGroupObjects",
              "ResultPath": "$.EC2_SG_Results",
              "Iterator": {
                "StartAt": "EC2_TransformItem",
                "States": {
                  "EC2_TransformItem": {
                    "Type": "Pass",
                    "Parameters": {
                      "groupId.$": "$.GroupId"
                    },
                    "ResultPath": "$",
                    "Next": "EC2_SG_Describe"
                  },
                  "EC2_SG_Describe": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::aws-sdk:ec2:describeSecurityGroups",
                    "Parameters": {
                      "GroupIds.$": "States.Array($.groupId)"
                    },
                    "ResultPath": "$.SGDetails",
                    "Next": "EC2_SG_RevokeParallel"
                  },
                  "EC2_SG_RevokeParallel": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "EC2_CheckIngress",
                        "States": {
                          "EC2_CheckIngress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissions[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "EC2_RevokeIngress"
                              }
                            ],
                            "Default": "EC2_SkipIngress"
                          },
                          "EC2_RevokeIngress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupIngress",
                            "Parameters": {
                              "GroupId.$": "$.groupId",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissions"
                            },
                            "End": true
                          },
                          "EC2_SkipIngress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "EC2_CheckEgress",
                        "States": {
                          "EC2_CheckEgress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "EC2_RevokeEgress"
                              }
                            ],
                            "Default": "EC2_SkipEgress"
                          },
                          "EC2_RevokeEgress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupEgress",
                            "Parameters": {
                              "GroupId.$": "$.groupid",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress"
                            },
                            "End": true
                          },
                          "EC2_SkipEgress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "Next": "EC2_Done"
            },
            "EC2_Done": {
              "Type": "Succeed"
            },

            "Fargate_SelectTask": {
              "Type": "Pass",
              "Parameters": {
                "ClusterArn.$": "$.detail.findings[0].Resources[0].Details.AwsEcsCluster.ClusterArn",
                "TaskId.$": "$.detail.findings[0].Resources[1].Id"
              },
              "ResultPath": "$.selectedTask",
              "Next": "Fargate_DescribeTask"
            },
            "Fargate_DescribeTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
              "Parameters": {
                "Cluster.$": "$.selectedTask.ClusterArn",
                "Tasks.$": "States.Array($.selectedTask.TaskId)"
              },
              "ResultPath": "$.FargateTask",
              "Next": "Fargate_ExtractServiceName"
            },
            "Fargate_ExtractServiceName": {
              "Type": "Pass",
              "Parameters": {
                "serviceName.$": "States.ArrayGetItem(States.StringSplit($.FargateTask.Tasks[0].Group, ':'), 1)",
                "ClusterArn.$": "$.selectedTask.ClusterArn"
              },
              "ResultPath": "$.extractedService",
              "Next": "Fargate_DescribeService"
            },
            "Fargate_DescribeService": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:describeServices",
              "Parameters": {
                "Cluster.$": "$.extractedService.ClusterArn",
                "Services.$": "States.Array($.extractedService.serviceName)"
              },
              "ResultPath": "$.serviceDetails",
              "Next": "Fargate_ExtractServiceSG"
            },
            "Fargate_ExtractServiceSG": {
              "Type": "Pass",
              "Parameters": {
                "securityGroupObjects.$": "$.serviceDetails.services[0].networkConfiguration.awsvpcConfiguration.securityGroups"
              },
              "ResultPath": "$.extractedSG",
              "Next": "Fargate_ProcessSG"
            },
            "Fargate_ProcessSG": {
              "Type": "Map",
              "ItemsPath": "$.extractedSG",
              "ResultPath": "$.Fargate_SG_Results",
              "Iterator": {
                "StartAt": "Fargate_TransformItem",
                "States": {
                  "Fargate_TransformItem": {
                    "Type": "Pass",
                    "Parameters": {
                      "groupId.$": "$$.Map.Item.Value"
                    },
                    "ResultPath": "$",
                    "Next": "Fargate_SG_Describe"
                  },
                  "Fargate_SG_Describe": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::aws-sdk:ec2:describeSecurityGroups",
                    "Parameters": {
                      "GroupIds.$": "States.Array($.groupId)"
                    },
                    "ResultPath": "$.SGDetails",
                    "Next": "Fargate_SG_RevokeParallel"
                  },
                  "Fargate_SG_RevokeParallel": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "Fargate_CheckIngress",
                        "States": {
                          "Fargate_CheckIngress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissions[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "Fargate_RevokeIngress"
                              }
                            ],
                            "Default": "Fargate_SkipIngress"
                          },
                          "Fargate_RevokeIngress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupIngress",
                            "Parameters": {
                              "GroupId.$": "$.groupid",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissions"
                            },
                            "End": true
                          },
                          "Fargate_SkipIngress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Fargate_CheckEgress",
                        "States": {
                          "Fargate_CheckEgress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "Fargate_RevokeEgress"
                              }
                            ],
                            "Default": "Fargate_SkipEgress"
                          },
                          "Fargate_RevokeEgress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupEgress",
                            "Parameters": {
                              "GroupId.$": "$.groupid",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress"
                            },
                            "End": true
                          },
                          "Fargate_SkipEgress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "Next": "Fargate_Done"
            },
            "Fargate_Done": {
              "Type": "Succeed"
            }
          }
        }
  
  EventBridgeStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EventBridgeStepFunctionsRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "AllowStartExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt SecurityGroupRevocationStateMachine.Arn
  
  SecurityHubEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "SecurityHubToStepFunctions-${AWS::StackName}"
      EventPattern:
        source:
          - "aws.securityhub"
        detail:
          findings:
            ProductName:
              - "GuardDuty"
            Severity:
              Label:
                - "CRITICAL"
                - "HIGH"
      Targets:
        - Arn: !GetAtt SecurityGroupRevocationStateMachine.Arn
          Id: "TargetStateMachine"
          RoleArn: !GetAtt EventBridgeStepFunctionsRole.Arn

Outputs:
  SecurityGroupRevocationStateMachineArn:
    Description: "ARN of the Step Functions State Machine"
    Value: !Ref SecurityGroupRevocationStateMachine
  SecurityGroupRevocationStateMachineName:
    Description: "Name of the Step Functions State Machine"
    Value: !Ref SecurityGroupRevocationStateMachine
  EventBridgeStepFunctionsRoleArn:
    Description: "ARN of the IAM Role for EventBridge to start the state machine"
    Value: !GetAtt EventBridgeStepFunctionsRole.Arn
