AWSTemplateFormatVersion: "2010-09-09"
Description: >
  このテンプレートは、GuardDuty の所見が Security Hub にインポートされた後、
  Security Hub の Finding イベント（aws.securityhub / "Security Hub Findings - Imported"）
  をトリガーに、対象の EC2 または ECS(Fargate)
  インスタンスに紐づくセキュリティグループの ingress/egress ルールを削除する
  Step Functions 状態マシンを起動する仕組みを作成します。
  ※ 必要に応じて IAM 権限やエラーハンドリングは調整してください。

Resources:

  ### Step Functions 実行用 IAM ロール
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "StepFunctionsExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsServiceIntegrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DescribeNetworkInterfaces
                  - ecs:DescribeTasks
                Resource: "*"

  ### Step Functions 状態マシン（EC2／Fargate 両対応）
  SecurityGroupRevocationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: SecurityGroupRevocationStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Revoke security group rules for EC2 and ECS Fargate based on Security Hub findings",
          "StartAt": "CheckResourceType",
          "States": {
            "CheckResourceType": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.detail.resource.resourceType",
                  "StringEquals": "Instance",
                  "Next": "EC2_DescribeInstance"
                },
                {
                  "Variable": "$.detail.resource.resourceType",
                  "StringEquals": "ECSCluster",
                  "Next": "Fargate_DescribeTask"
                }
              ],
              "Default": "UnsupportedResource"
            },
            "UnsupportedResource": {
              "Type": "Fail",
              "Error": "UnsupportedResourceType",
              "Cause": "The resource type is not supported."
            },
            "EC2_DescribeInstance": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
              "Parameters": {
                "InstanceIds.$": "States.Array($.detail.resource.instanceDetails.instanceId)"
              },
              "ResultPath": "$.EC2Instance",
              "Next": "EC2_ExtractSG"
            },
            "EC2_ExtractSG": {
              "Type": "Pass",
              "Parameters": {
                "securityGroupObjects.$": "$.EC2Instance.Reservations[0].Instances[0].SecurityGroups"
              },
              "ResultPath": "$.extractedSG",
              "Next": "EC2_ProcessSG"
            },
            "EC2_ProcessSG": {
              "Type": "Map",
              "ItemsPath": "$.extractedSG.securityGroupObjects",
              "ResultPath": "$.EC2_SG_Results",
              "Iterator": {
                "StartAt": "EC2_TransformItem",
                "States": {
                  "EC2_TransformItem": {
                    "Type": "Pass",
                    "Parameters": {
                      "transformed.groupId.$": "$.GroupId"
                    },
                    "ResultPath": "$",
                    "Next": "EC2_SG_Describe"
                  },
                  "EC2_SG_Describe": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::aws-sdk:ec2:describeSecurityGroups",
                    "Parameters": {
                      "GroupIds.$": "States.Array($.groupId)"
                    },
                    "ResultPath": "$.SGDetails",
                    "Next": "EC2_SG_RevokeParallel"
                  },
                  "EC2_SG_RevokeParallel": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "EC2_CheckIngress",
                        "States": {
                          "EC2_CheckIngress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissions[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "EC2_RevokeIngress"
                              }
                            ],
                            "Default": "EC2_SkipIngress"
                          },
                          "EC2_RevokeIngress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupIngress",
                            "Parameters": {
                              "GroupId.$": "$.groupId",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissions"
                            },
                            "End": true
                          },
                          "EC2_SkipIngress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "EC2_CheckEgress",
                        "States": {
                          "EC2_CheckEgress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "EC2_RevokeEgress"
                              }
                            ],
                            "Default": "EC2_SkipEgress"
                          },
                          "EC2_RevokeEgress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupEgress",
                            "Parameters": {
                              "GroupId.$": "$.groupId",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress"
                            },
                            "End": true
                          },
                          "EC2_SkipEgress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "Next": "EC2_Done"
            },
            "EC2_Done": {
              "Type": "Succeed"
            },
            "Fargate_DescribeTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
              "Parameters": {
                "Cluster.$": "$.detail.resource.ecsClusterDetails.name",
                "Tasks.$": "States.Array($.detail.resource.ecsClusterDetails.taskDetails.arn)"
              },
              "ResultPath": "$.FargateTask",
              "Next": "Fargate_ExtractENI"
            },
            "Fargate_ExtractENI": {
              "Type": "Pass",
              "Parameters": {
                "eniIds.$": "$.FargateTask.tasks[0].attachments[*].details[?(@.name=='networkInterfaceId')].value"
              },
              "ResultPath": "$.ENI",
              "Next": "Fargate_DescribeENI"
            },
            "Fargate_DescribeENI": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ec2:describeNetworkInterfaces",
              "Parameters": {
                "NetworkInterfaceIds.$": "$.ENI.eniIds"
              },
              "ResultPath": "$.ENI_Desc",
              "Next": "Fargate_ExtractSG"
            },
            "Fargate_ExtractSG": {
              "Type": "Pass",
              "Parameters": {
                "securityGroupObjects.$": "$.ENI_Desc.NetworkInterfaces[0].Groups"
              },
              "ResultPath": "$.extractedSG",
              "Next": "Fargate_ProcessSG"
            },
            "Fargate_ProcessSG": {
              "Type": "Map",
              "ItemsPath": "$.extractedSG.securityGroupObjects",
              "ResultPath": "$.Fargate_SG_Results",
              "Iterator": {
                "StartAt": "Fargate_TransformItem",
                "States": {
                  "Fargate_TransformItem": {
                    "Type": "Pass",
                    "Parameters": {
                      "groupId.$": "$.GroupId"
                    },
                    "ResultPath": "$",
                    "Next": "Fargate_SG_Describe"
                  },
                  "Fargate_SG_Describe": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::aws-sdk:ec2:describeSecurityGroups",
                    "Parameters": {
                      "GroupIds.$": "States.Array($.groupId)"
                    },
                    "ResultPath": "$.SGDetails",
                    "Next": "Fargate_SG_RevokeParallel"
                  },
                  "Fargate_SG_RevokeParallel": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "Fargate_CheckIngress",
                        "States": {
                          "Fargate_CheckIngress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissions[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "Fargate_RevokeIngress"
                              }
                            ],
                            "Default": "Fargate_SkipIngress"
                          },
                          "Fargate_RevokeIngress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupIngress",
                            "Parameters": {
                              "GroupId.$": "$.groupId",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissions"
                            },
                            "End": true
                          },
                          "Fargate_SkipIngress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Fargate_CheckEgress",
                        "States": {
                          "Fargate_CheckEgress": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress[0].IpProtocol",
                                "IsPresent": true,
                                "Next": "Fargate_RevokeEgress"
                              }
                            ],
                            "Default": "Fargate_SkipEgress"
                          },
                          "Fargate_RevokeEgress": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:ec2:revokeSecurityGroupEgress",
                            "Parameters": {
                              "GroupId.$": "$.groupId",
                              "IpPermissions.$": "$.SGDetails.SecurityGroups[0].IpPermissionsEgress"
                            },
                            "End": true
                          },
                          "Fargate_SkipEgress": {
                            "Type": "Pass",
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "Next": "Fargate_Done"
            },
            "Fargate_Done": {
              "Type": "Succeed"
            }
          }
        }
  
  ### EventBridge から Step Functions を起動するための IAM ロール
  EventBridgeStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EventBridgeStepFunctionsRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "AllowStartExecution"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt SecurityGroupRevocationStateMachine.Arn

SecurityHubEventRule:
  Type: AWS::Events::Rule
  Properties:
    Name: !Sub "SecurityHubToStepFunctions-${AWS::StackName}"
    EventPattern:
      source:
        - "aws.securityhub"
      detail-type:
        - "Security Hub Findings - Imported"
      detail:
        ProductArn:
          - "arn:aws:securityhub:*:aws:product/aws/guardduty"
        Severity:
          Label:
            - "CRITICAL"
            - "HIGH"
    Targets:
      - Arn: !GetAtt SecurityGroupRevocationStateMachine.Arn
        Id: "TargetStateMachine"
        RoleArn: !GetAtt EventBridgeStepFunctionsRole.Arn


Outputs:
  SecurityGroupRevocationStateMachineArn:
    Description: "ARN of the Step Functions State Machine"
    Value: !Ref SecurityGroupRevocationStateMachine
  SecurityGroupRevocationStateMachineName:
    Description: "Name of the Step Functions State Machine"
    Value: !Ref SecurityGroupRevocationStateMachine
  EventBridgeStepFunctionsRoleArn:
    Description: "ARN of the IAM Role for EventBridge to start the state machine"
    Value: !GetAtt EventBridgeStepFunctionsRole.Arn
  GuardDutyEventRuleArn:
    Description: "ARN of the EventBridge Rule triggering the state machine"
    Value: !GetAtt GuardDutyEventRule.Arn
