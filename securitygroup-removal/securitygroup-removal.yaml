AWSTemplateFormatVersion: "2010-09-09"
Description: >
  このテンプレートは、Security Hub にインポートされた GuardDuty の所見（Security Hub 経由）をトリガーに、
  対象の EC2 または ECS (Fargate) インスタンスに紐づくセキュリティグループの ingress/egress ルールを削除する仕組みを作成します。
  EC2の場合は Lambda 関数 (SecurityGroupRevokerFunctionEC2) が、Fargateの場合は Lambda 関数 (SecurityGroupRevokerFunctionFargate) が実行されます。

Resources:

  ## Step Functions 用実行ロール
  SecurityGroupRevokerSFRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SecurityGroupRevokerSFRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "SecurityGroupRevokerSFPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DescribeNetworkInterfaces
                  - ecs:DescribeTasks
                  - ecs:DescribeServices
                Resource: "*"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt SecurityGroupRevokerFunctionFargate.Arn
                  - !GetAtt SecurityGroupRevokerFunctionEC2.Arn

  ## Lambda 用実行ロール（Fargate用）
  SecurityGroupRevokerLambdaRoleFargate:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SecurityGroupRevokerLambdaRoleFargate-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "SecurityGroupRevokerLambdaPolicyFargate"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeTasks
                  - ecs:DescribeServices
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource: "*"

  ## Lambda 用実行ロール（EC2用）
  SecurityGroupRevokerLambdaRoleEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SecurityGroupRevokerLambdaRoleEC2-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "SecurityGroupRevokerLambdaPolicyEC2"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource: "*"

  ## Lambda 関数 (Fargate 用)
  SecurityGroupRevokerFunctionFargate:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "SecurityGroupRevokerFunctionFargate-${AWS::StackName}"
      Handler: index.lambda_handler
      Role: !GetAtt SecurityGroupRevokerLambdaRoleFargate.Arn
      Runtime: python3.8
      Timeout: 300
      Code:
        ZipFile: |
          import boto3, logging, re
          from botocore.exceptions import ClientError
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          ecs = boto3.client('ecs')
          ec2 = boto3.client('ec2')
          def lambda_handler(event, context):
              logger.info("Event received: %s", event)
              try:
                  resources = event["detail"]["findings"][0]["Resources"]
                  cluster_resource = next((r for r in resources if r["Type"] == "AwsEcsCluster"), None)
                  task_resource = next((r for r in resources if r["Type"] == "AwsEcsTask"), None)
                  if not cluster_resource or not task_resource:
                      raise Exception("Required ECS resources not found in event")
                  cluster_arn = cluster_resource["Details"]["AwsEcsCluster"]["ClusterArn"]
                  task_arn = task_resource["Id"]
                  task_response = ecs.describe_tasks(cluster=cluster_arn, tasks=[task_arn])
                  tasks = task_response.get('tasks', [])
                  if not tasks:
                      raise Exception(f"No task found for ARN: {task_arn}")
                  task = tasks[0]
                  group = task.get('group', '')
                  m = re.match(r"service:(.+)", group)
                  if not m:
                      raise Exception(f"Task is not associated with a service. group: {group}")
                  service_name = m.group(1)
                  logger.info(f"Extracted service name: {service_name}")
                  service_response = ecs.describe_services(cluster=cluster_arn, services=[service_name])
                  services = service_response.get('services', [])
                  if not services:
                      raise Exception(f"No service found with name: {service_name}")
                  service = services[0]
                  awsvpc_config = service.get('networkConfiguration', {}).get('awsvpcConfiguration', {})
                  security_groups = awsvpc_config.get('securityGroups', [])
                  if not security_groups:
                      raise Exception("No security groups found in the service's network configuration.")
                  logger.info(f"Security groups obtained: {security_groups}")
                  revoked_groups = []
                  for sg in security_groups:
                      sg_response = ec2.describe_security_groups(GroupIds=[sg])
                      if not sg_response['SecurityGroups']:
                          logger.warning(f"No details found for SG {sg}")
                          continue
                      sg_details = sg_response['SecurityGroups'][0]
                      ingress = sg_details.get('IpPermissions', [])
                      egress = sg_details.get('IpPermissionsEgress', [])
                      if ingress:
                          try:
                              ec2.revoke_security_group_ingress(GroupId=sg, IpPermissions=ingress)
                              logger.info(f"Revoked ingress for {sg}")
                          except ClientError as e:
                              if e.response['Error']['Code'] == "InvalidPermission.NotFound":
                                  logger.info(f"Ingress rules for {sg} already removed.")
                              else:
                                  raise e
                      if egress:
                          try:
                              ec2.revoke_security_group_egress(GroupId=sg, IpPermissions=egress)
                              logger.info(f"Revoked egress for {sg}")
                          except ClientError as e:
                              if e.response['Error']['Code'] == "InvalidPermission.NotFound":
                                  logger.info(f"Egress rules for {sg} already removed.")
                              else:
                                  raise e
                      revoked_groups.append(sg)
              except Exception as e:
                  logger.error(f"Error processing Fargate event: {e}")
                  raise e
              return { 'statusCode': 200, 'body': f"Revoked SGs: {', '.join(revoked_groups)}" }
  
  ## Lambda 関数 (EC2 用)
  SecurityGroupRevokerFunctionEC2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "SecurityGroupRevokerFunctionEC2-${AWS::StackName}"
      Handler: index.lambda_handler
      Role: !GetAtt SecurityGroupRevokerLambdaRoleEC2.Arn
      Runtime: python3.8
      Timeout: 300
      Code:
        ZipFile: |
          import boto3, logging
          from botocore.exceptions import ClientError
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          ec2 = boto3.client("ec2")
          def lambda_handler(event, context):
              try:
                  resources = event["detail"]["findings"][0]["Resources"]
                  instance_resource = next((r for r in resources if r["Type"] == "AwsEc2Instance"), None)
                  if not instance_resource:
                      raise Exception("No AwsEc2Instance resource found in event")
                  instance_id = instance_resource["Id"].split("/")[-1]
                  logger.info(f"Instance ID: {instance_id}")
                  response = ec2.describe_instances(InstanceIds=[instance_id])
                  reservations = response.get("Reservations", [])
                  if not reservations or not reservations[0].get("Instances"):
                      raise Exception(f"No instance details for {instance_id}")
                  instance = reservations[0]["Instances"][0]
                  security_groups = [sg["GroupId"] for sg in instance.get("SecurityGroups", [])]
                  if not security_groups:
                      raise Exception(f"No security groups found for instance {instance_id}")
                  logger.info(f"Security groups for instance {instance_id}: {security_groups}")
                  revoked = []
                  for sg in security_groups:
                      sg_response = ec2.describe_security_groups(GroupIds=[sg])
                      if not sg_response["SecurityGroups"]:
                          logger.warning(f"No details for SG {sg}")
                          continue
                      sg_details = sg_response["SecurityGroups"][0]
                      ingress = sg_details.get("IpPermissions", [])
                      egress = sg_details.get("IpPermissionsEgress", [])
                      if ingress:
                          try:
                              ec2.revoke_security_group_ingress(GroupId=sg, IpPermissions=ingress)
                              logger.info(f"Revoked ingress for {sg}")
                          except ClientError as e:
                              if e.response['Error']['Code'] == "InvalidPermission.NotFound":
                                  logger.info(f"Ingress for {sg} already removed.")
                              else:
                                  raise e
                      if egress:
                          try:
                              ec2.revoke_security_group_egress(GroupId=sg, IpPermissions=egress)
                              logger.info(f"Revoked egress for {sg}")
                          except ClientError as e:
                              if e.response['Error']['Code'] == "InvalidPermission.NotFound":
                                  logger.info(f"Egress for {sg} already removed.")
                              else:
                                  raise e
                      revoked.append(sg)
                  return { "statusCode": 200, "body": f"Revoked SGs: {', '.join(revoked)}" }
              except Exception as e:
                  logger.error(f"Error: {e}")
                  raise e
  
  ## Lambda::Permission リソース
  SecurityGroupRevokerFunctionFargateInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SecurityGroupRevokerFunctionFargate.Arn
      Action: lambda:InvokeFunction
      Principal: states.amazonaws.com
      SourceArn: !GetAtt SecurityGroupRevokerStateMachine.Arn
  
  SecurityGroupRevokerFunctionEC2InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SecurityGroupRevokerFunctionEC2.Arn
      Action: lambda:InvokeFunction
      Principal: states.amazonaws.com
      SourceArn: !GetAtt SecurityGroupRevokerStateMachine.Arn
  
  ## Step Functions 状態マシン
  SecurityGroupRevokerStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: SecurityGroupRevokerStateMachine
      RoleArn: !GetAtt SecurityGroupRevokerSFRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "State machine to revoke security group rules for EC2 and Fargate tasks",
          "StartAt": "CheckResourceType",
          "States": {
            "CheckResourceType": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.detail.findings[0].Resources[0].Type",
                  "StringEquals": "AwsEc2Instance",
                  "Next": "InvokeEC2Revoker"
                },
                {
                  "Variable": "$.detail.findings[0].Resources[0].Type",
                  "StringEquals": "AwsEcsTask",
                  "Next": "InvokeFargateRevoker"
                },
                {
                  "Variable": "$.detail.findings[0].Resources[1].Type",
                  "StringEquals": "AwsEcsTask",
                  "Next": "InvokeFargateRevoker"
                }
              ],
              "Default": "UnsupportedResource"
            },
            "UnsupportedResource": {
              "Type": "Fail",
              "Error": "UnsupportedResourceType",
              "Cause": "Resource type not supported."
            },
            "InvokeEC2Revoker": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${SecurityGroupRevokerFunctionEC2.Arn}",
                "Payload.$": "$"
              },
              "ResultPath": "$.lambdaResult",
              "Next": "SucceedState"
            },
            "InvokeFargateRevoker": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${SecurityGroupRevokerFunctionFargate.Arn}",
                "Payload.$": "$"
              },
              "ResultPath": "$.lambdaResult",
              "Next": "SucceedState"
            },
            "SucceedState": {
              "Type": "Succeed"
            }
          }
        }
  
  ## EventBridge 用ロール
  SecurityGroupRevokerEBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SecurityGroupRevokerEBRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "EBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt SecurityGroupRevokerStateMachine.Arn
  
  ## Security Hub イベントルール
  SecurityHubEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "SecurityHubToStepFunctions-${AWS::StackName}"
      EventPattern:
        source:
          - "aws.securityhub"
        detail:
          findings:
            ProductName:
              - "GuardDuty"
            Severity:
              Label:
                - "CRITICAL"
                - "HIGH"
      Targets:
        - Arn: !GetAtt SecurityGroupRevokerStateMachine.Arn
          Id: "TargetStateMachine"
          RoleArn: !GetAtt SecurityGroupRevokerEBRole.Arn

Outputs:
  SecurityGroupRevokerStateMachineArn:
    Description: "ARN of the Step Functions State Machine"
    Value: !Ref SecurityGroupRevokerStateMachine
  SecurityGroupRevokerStateMachineName:
    Description: "Name of the Step Functions State Machine"
    Value: !Ref SecurityGroupRevokerStateMachine
  SecurityGroupRevokerEBRoleArn:
    Description: "ARN of the IAM Role for EventBridge"
    Value: !GetAtt SecurityGroupRevokerEBRole.Arn
  SecurityGroupRevokerFunctionFargateArn:
    Description: "ARN of the Lambda function for Fargate"
    Value: !GetAtt SecurityGroupRevokerFunctionFargate.Arn
  SecurityGroupRevokerFunctionEC2Arn:
    Description: "ARN of the Lambda function for EC2"
    Value: !GetAtt SecurityGroupRevokerFunctionEC2.Arn
  EcsLambdaRoleArn:
    Description: "ARN of the Lambda execution role for Fargate"
    Value: !GetAtt SecurityGroupRevokerLambdaRoleFargate.Arn
  EC2LambdaRoleArn:
    Description: "ARN of the Lambda execution role for EC2"
    Value: !GetAtt SecurityGroupRevokerLambdaRoleEC2.Arn
